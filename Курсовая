//слайды у Boolякова со стр 87


#include<iostream>
#include<string>
#include <conio.h>
#pragma warning(disable : 4996)

using namespace std;

template<class TKey, class TValue>
class MAP
{
private :
	struct Collection
	{
		TKey key;
		TValue value;
	};

	int size;  // длиннна всего массива
	int len; // это текущий номер ячейки

	Collection *array;

public: 
	MAP()
	{
		len = 0;
		size = 5;
		array = new Collection[size];
	}

    void Expansion() 
	{
		cout << "Extension ! " << endl;
		int temp;
		temp = size * 2;
		Collection *tempArray = new Collection[temp];

		for (int i = 0; i < len; i++)
		{
			tempArray[i] = array[i];
		}
	
		array = tempArray;
		size = temp;

		// i also need to delete old array ( it`s a tempArray)
	}
	

	void Add(TKey Nkey, TValue Nvalue)
	{
		if (len == size)
		{
			cout << "I call an extension !" << endl;
			Expansion();
		
		}

		cout << "Nothing" << endl;
		array[len].key = Nkey;
		array[len].value = Nvalue;
		len++;
	}

	void Del(TKey Nkey)
	{
		int index;
		index = Search(Nkey);
		for (int i = index; i < getLen(); i++)
		{
			array[i] = array[i + 1];
		}
		len--;

	}

	int Search(TKey Nkey)
	{
		int i;
		for ( i = 0; i < len; i++)
		{
			if (array[i].key == Nkey)
				return i;
		}
	}

	int getLen()
	{
		return len;
    }

	TKey getKey(int num)
	{
		return array[num].key;
	}
	
	TValue& getValue(int num)
	{
		return array[num].value;
	}

	friend ostream& operator << (ostream& out,MAP& map)
	{
		for (int i = 0; i < map.getLen(); i++)
		{
			cout <<"this is a kay :  " <<map.getKey(i) << endl;
			cout << "this is a value :  " << map.getValue(i) << endl;
		}
		return out;
	}

};

class Book
{
private:
	char *name;
	int year;
	int exemp;
public:
	Book()
	{
		name = "No name";
		year = 0;
		exemp = 0;
	}

	Book(char* name, int year, int exemp)
	{
		this->name = name;
		this->year = year;
		this->exemp = exemp;
	}
	friend ostream &operator<<(ostream &out, Book &book) 
	{
		out << " The name of the book :  " <<book.name << endl << " year : " << book.year <<  endl;
		return out;
	}

	friend Book &operator >> (istream& in, Book &book)
	{
		
		int year;
		char* name = new char[64];
		cout << "Enter the name : ";
		in >> name;
		cout << "Enter the year : ";
		in>> year;

		book.name = name;
		book.year = year;

		return book;
	}

	//~Book()
	//{
	//	delete[]name;
	//}
};



int main()
{
	cout << "Welcome ! " << endl;


	//char* name = new char[255];
	//cin >> name;
	//Book b;
	//cin >> b;
	//cout << a;
	//string st1("PIZDEC ! \n");
	//  MAP<string ,int> MY;
	  //MY.Add(st1, 11);
	  //MY.Add(13, b);

 //  MAP<char, int> MY;
	//MY.Add('a', 5);
	//MY.Add('s', 0);
	//MY.Add('b', 0);
	//MY.Del(12);
	//cout << MY;
	MAP<string, Book> MY;
	
	
	while (true)
	{
		cout << "What operation do you want to perform ? " << endl;
		cout << " ____________________________________________ " << endl;
		cout << "1.Add a book " << endl;
		cout << "2.Delete the book by author's name" << endl;
		cout << "3.Displaying books on the console" << endl;
		cout << "4." << endl;
		cout << "5.Exit" << endl;
		cout << " ____________________________________________ " << endl;

		switch (_getch())
		{
		case '1':
		{   string Author;
            Book NewBook;
			cout << "Enter the author of the book : ";
			cin >> Author;
			cin >> NewBook;
			MY.Add(Author, NewBook);
			break;
		}

		case '2':
		{
			string Author;
			cout << "Enter the author's name to delete his book : ";
			cin >> Author;
			MY.Del(Author);
			break;
		}

		case '3':
		{
			cout << MY;
			break;
		}

		case '4':
		{
			
			break;
		}

		case '5':
		{
			return 0;
		}

		default:
		{
			cout << "Try again" << endl;
			break;
		}

		}//конец свича


	}// выход из вайла


	system("pause");
	return 0;
}

